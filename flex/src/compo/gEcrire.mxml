<?xml version="1.0" encoding="utf-8"?>
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"
	xmlns:co="compo.*"
	width="100%" height="100%" color="#000000"
	verticalAlign="top" horizontalAlign="left" 
	paddingLeft="20" paddingTop="15" paddingBottom="20" paddingRight="20"
	initialize="init()">
	
	<mx:Script>
		<![CDATA[
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.MenuEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable] public var concepts:ArrayCollection;
			private var selectCpt:Object;

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				Alert.show(str, "ERREUR : Ecriture");
			}
			
			private function init():void
			{
				this.parentApplication.verifDico();
				ROC.findAllByDicos(this.parentApplication.arrVerifDico);
				
			}			
			
			private function handleAutoCompleteChange():void
			{
				selectCpt = autoComplete.selectedItem;
				if(selectCpt != null ){
					//suivant le type on affiche le paramètrage
					//on crée le texte génératif
					genere();
				}
			}
			private function genere():void
			{
				txtGen.text = txtGen.text + "[" + selectCpt.type+ "_" + selectCpt.lib+ "]";
			}			
						

			protected function findAllByDicos_resultHandler(event:ResultEvent):void
			{
				var arr:Array = event.result as Array;
				concepts = new ArrayCollection(arr);
				var tot:String = "";
			}			
			
			protected function enregistrer_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(txtGen.text);
					arrO.push(txtRes);					
					this.parentApplication.testerGen(arrT,arrO);
				}
				
			}
			//
			private function handleItemClick( event:MenuEvent ):void
			{
				switch (String(event.item.@data))
				{
					case "browse":
						autoComplete.showBrowser();
						break;
					case "remove":
						autoComplete.selectedItems.removeAll();
						break;	
				}
			}
			//
		]]>
	</mx:Script>
	<mx:RemoteObject id="ROC"
					 source="Model_DbTable_Gen_concepts" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event)">
		<mx:method name="findAllByDicos" result="findAllByDicos_resultHandler(event)" /> 
	</mx:RemoteObject>
	
	
	<mx:Component id="dropDownItemRenderer">
		<co:hbConceptItemRenderer selectedItems="{ outerDocument.autoComplete.selectedItems }" />
	</mx:Component>
	<mx:XML format="e4x" id="menuData">
		<root>
			<menuitem data="browse" label="Browse..."/>
			<menuitem data="remove" label="Remove All"/>
		</root>
	</mx:XML>
	
	<mx:VBox width="100%" minWidth="200">
		<!--		
		<hc:AutoComplete id="autoComplete" dataProvider="{ concepts }" labelField="lib" matchType="{AutoComplete.MATCH_BEGINNING}" 
						 prompt="Ecrivez votre texte génratif" width="100%" change="{ handleAutoCompleteChange() }"
						 allowNewValues="{ true }" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" 
						 allowDuplicates="{ true }" allowMultipleSelection="{ true }" 
						 allowEditingNewValues="{ true }" dropDownItemRenderer="{ dropDownItemRenderer }" showRemoveIcon="true"
						 backspaceAction="focus"/>
		-->
		<hc:AdvancedAutoComplete id="autoComplete" dataProvider="{ concepts }" labelField="lib"
								 width="300" useListBuilder="{true}" matchType="{AutoComplete.MATCH_BEGINNING}"
								 showBrowseButton="{false}" showOrderButtons="{true}"
								 allowMultipleSelection="true" selectionLayout="vertical" change="handleAutoCompleteChange()"
								 dropDownItemRenderer="{ dropDownItemRenderer }" itemClick="handleItemClick(event)"
								 actionsMenuDataProvider="{ menuData }" showRemoveButton="{true}"
								 browserFields="{ ['lib','type'] }"/>
		<mx:TextArea id="txtGen" width="100%" />
		<mx:TextArea id="txtRes" width="100%" />
		<mx:HBox>
			<mx:Button label="Enregistrer" click="enregistrer_clickHandler(event)" />
			<mx:Button label="Tester" click="tester_clickHandler(event)" />
		</mx:HBox>
	</mx:VBox>
	
</mx:HBox>