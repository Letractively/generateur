<?xml version="1.0" encoding="utf-8"?>
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"
	xmlns:co="compo.*"
	width="100%" height="100%" 
	verticalAlign="top" horizontalAlign="left" 
	paddingLeft="3" paddingTop="3" paddingBottom="3" paddingRight="3"
	initialize="init()">
	
	<mx:Script>
		<![CDATA[
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;

			[Bindable] public var bRemove:Boolean=true;
			[Bindable] public var bAjout:Boolean=true;
			[Bindable] public var bModif:Boolean=true;
			
			[Bindable] public var oItem:Object;
			[Bindable] public var acItems:ArrayCollection;
			[Bindable] public var fctAnnuler:Function;
			[Bindable] public var fctEnregistrer:Function;
			[Bindable] public var concepts:ArrayCollection;
			private var selectCpt:Object;
			[Bindable] public  var allConcept:Array;

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				Alert.show(str, "ERREUR : Ecriture");
			}
			
			private function init():void
			{
				bAjout = this.parentApplication.uti.écriture;
				bModif = this.parentApplication.uti.écriture;
				bRemove = this.parentApplication.uti.suppression;
				
				this.parentApplication.verifDico();
				allConcept=this.parentApplication.allConcept;
				if(!allConcept)
					ROC.findAllByDicos(this.parentApplication.arrVerifDico, false);
				
			}			

			protected function autoComplete_clickHandler(event:MouseEvent):void
			{
				var className:String = flash.utils.getQualifiedClassName(event.target);
				if(className!="mx.core::UITextField"){
					selectCpt = autoComplete.selectedItem;
					if(selectCpt.type=="v"){
						showParamVerbe();
					}					
				}
				
			}
			
			private function handleAutoCompleteChange():void
			{
				selectCpt = autoComplete.selectedItem;
				acItems = autoComplete.selectedItems;
				var className:String = flash.utils.getQualifiedClassName(selectCpt);
				if(selectCpt != null && className=="Array"){
					//suivant le type on affiche le paramètrage
					if(selectCpt.type=="v"){
						showParamVerbe();
					/*
					}else if(selectCpt.type=="m"){
						showParamSubstantif();
					*/
					}else{
						//on crée le texte génératif
						genere(null);						
					}
				}else{
					txtGen.text = txtGen.text + selectCpt;					
				}
			}
			
			private function showParamVerbe():void
			{
				var twPV:twParamsV= twParamsV(
					PopUpManager.createPopUp(this.parentApplication.dgOeuParam, twParamsV, true));
				twPV.callback = genere;
				twPV.arrNeg = allConcept["negations"];
				twPV.arrPrC = allConcept["pronomsComp"];
				twPV.arrPrS = allConcept["pronomsSujet"];
				twPV.arrPrSI = allConcept["pronomsSujetInd"];

				PopUpManager.centerPopUp(twPV);						
				
			}

			private function showParamSubstantif():void
			{
				var twPS:twParamsM= twParamsM(
					PopUpManager.createPopUp(this.parentApplication.dgOeuParam, twParamsM, true));
				twPS.callback = genere;
				twPS.oItem = selectCpt;
				twPS.arrDet = allConcept["determinants"];
				
				PopUpManager.centerPopUp(twPS);						
				
			}
			
			private function genere(param:String):void
			{
				switch(selectCpt.type) 
				{ 
					case "déterminant":
						var o:int = int(selectCpt.ordre); 
						var n:int = int(selectCpt.num);
						if(o>=4)
							txtGen.text += " [" + (n+50)+ "|";
						else
							txtGen.text += " [" + selectCpt.num+ "|";
						break; 
					case "a":
						txtGen.text += " [" + selectCpt.type+ "_" + selectCpt.lib+ "]";
						break; 
					case "m": 
						if(txtGen.text.substr(txtGen.text.length-1)=="|")
							txtGen.text += selectCpt.type+ "_" + selectCpt.lib+ "]";
						else if(param)
							txtGen.text += param + selectCpt.type+ "_" + selectCpt.lib+ "]";							
						else
							txtGen.text += "[" + selectCpt.type+ "_" + selectCpt.lib+ "]";							
						break; 
					case "s":
						txtGen.text += " [" + selectCpt.type+ "_" + selectCpt.lib + "]";
						break;
					case "syntagmes":
						txtGen.text += " [" + selectCpt.num+ "#" + "]";
						break;					
					case "v": 
						txtGen.text += param+ "|" + selectCpt.type+ "_" + selectCpt.lib+ "]";
						break; 
					default: 
						txtGen.text += "[" + selectCpt.type+ "_" + selectCpt.lib+ "]";
						break; 
				}	
			}			
						

			protected function findAllByDicos_resultHandler(event:ResultEvent):void
			{				
				allConcept = event.result as Array;
				this.parentApplication.allConcept = allConcept;
				// call
				var arrMerge:Array = merge(allConcept["concepts"], allConcept["syntagmes"], allConcept["pronomsComp"], allConcept["pronomsSujet"], allConcept["pronomsSujetInd"], allConcept["determinants"], allConcept["negations"]);			
				concepts = new ArrayCollection(arrMerge);
				var tot:String = "";
			}			

			private function merge(...arrays):Array {
				var result:Array = [];
				for(var i:int=0;i<arrays.length;i++){
					result = result.concat(arrays[i]);
				}
				return result;
			}
			
			protected function enregistrer_clickHandler(event:MouseEvent):void
			{
				
			}
			
			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(txtGen.text);
					arrO.push(txtRes);					
					this.parentApplication.testerGen(arrT,arrO);
				}
				
			}
			/*
			private function handleItemClick( event:MenuEvent ):void
			{
				switch (String(event.item.@data))
				{
					case "browse":
						autoComplete.showBrowser();
						break;
					case "remove":
						autoComplete.selectedItems.removeAll();
						break;	
				}
			}
			*/
			
			
		]]>
	</mx:Script>
	<mx:RemoteObject id="ROC"
					 source="Model_DbTable_Gen_concepts" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event)">
		<mx:method name="findAllByDicos" result="findAllByDicos_resultHandler(event)" /> 
	</mx:RemoteObject>
	
	
	<mx:Component id="dropDownItemRenderer">
		<co:hbConceptItemRenderer selectedItems="{ outerDocument.autoComplete.selectedItems }" />
	</mx:Component>
	<mx:XML format="e4x" id="menuData">
		<root>
			<menuitem data="browse" label="Editer..."/>
			<menuitem data="remove" label="Suprimer tout..."/>
		</root>
	</mx:XML>
	
	<mx:HBox width="100%" height="100%" >
		<mx:VBox width="100%" height="100%" >
			<mx:Label text="Structure du texte génératif :" />
			<hc:AutoComplete id="autoComplete" dataProvider="{ concepts }" labelField="lib" matchType="{AutoComplete.MATCH_BEGINNING}" 
							 prompt="Ecrivez votre texte génératif" width="100%" change="{ handleAutoCompleteChange() }"
							 click="autoComplete_clickHandler(event)"
							 allowNewValues="{ true }" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" 
							 allowDuplicates="{ true }" allowMultipleSelection="{ true }" 
							 allowEditingNewValues="{ true }" dropDownItemRenderer="{ dropDownItemRenderer }" showRemoveIcon="true"
							 backspaceAction="focus"/>
		<!--		
		<hc:AdvancedAutoComplete id="autoComplete" dataProvider="{ concepts }" labelField="lib"
								 width="300" height="100" useListBuilder="{true}" matchType="{AutoComplete.MATCH_BEGINNING}"
								 showBrowseButton="{false}" showOrderButtons="{true}"
								 allowMultipleSelection="true" selectionLayout="vertical" change="handleAutoCompleteChange()"
								 dropDownItemRenderer="{ dropDownItemRenderer }" itemClick="handleItemClick(event)"
								 actionsMenuDataProvider="{ menuData }" showRemoveButton="{true}"
								 browserFields="{ ['lib','type'] }"/>
		-->
			<mx:Label text="Texte génératif :" />
			<mx:TextArea id="txtGen" width="100%" text="{oItem.valeur}" />
			<mx:Label text="Résultat de la génération :" />
			<mx:TextArea id="txtRes" width="100%" />
			<mx:HBox>
				<mx:Button label="Enregistrer" click="{fctEnregistrer()}" visible="{bModif}" />
				<mx:Button label="Tester" click="tester_clickHandler(event)" />
				<mx:Button label="Annuler" click="{fctAnnuler()}" />			
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>	
</mx:HBox>