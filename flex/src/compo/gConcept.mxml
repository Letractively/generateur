<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:compo="compo.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		 >
	<s:layout>
		<s:VerticalLayout paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			//import flash.net.dns.AAAARecord;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
						
			[Bindable] public var idDico:String;
			[Bindable] public var bRemove:Boolean=true;
			[Bindable] public var bAjout:Boolean=true;
			[Bindable] public var bModif:Boolean=true;
			[Bindable] public var oItem:Object;
			private var action:String="";
			private var arrR:Array;
			private var arrN:Array = new Array;
			
			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				Alert.show(str, "ERREUR : Détail Concept");
				bModif = true;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(idDico){
					ROC.findByIdDico(idDico);
				}
				bModif = this.parentApplication.uti.écriture;
				bAjout = this.parentApplication.uti.écriture;
				bRemove = this.parentApplication.uti.suppression;
				
			}
			
			protected function findByDico_resultHandler(event:ResultEvent):void
			{
				dgDetail.removeAllElements();
				if(event.result){
					var arr:Array = event.result as Array;
					dg.dataProvider = arr;
					var dpCol:ArrayCollection = new ArrayCollection();
					dpCol.addItem({data:'any', label:'Tout'});
					dpCol.addItem({data:'lib', label:'Descripteur'});
					dpCol.addItem({data:'type', label:'Type'});
					dgFilter.dpColumns = dpCol;
					dgFilter.dpRows = arr;
					dgFilter.dg = dg;
				}
				//réinitialise le tableau génral des concepts
				this.parentApplication.allConcept=null;
			}
						
			private function selectDgItem(event:Event):void {
				
				oItem=event.currentTarget.selectedItem;
				initDetail();
			}
			
			private function removeItem():void {
				
					Alert.show("Confirmez-vous la suppression de l'item ?",
						"Confirmation Suppression", 3, this, removeItemHandler);				
			}
			
			private function removeItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{
					action = "supprimer";
					ROC.utilise(oItem.id_concept, oItem.type+"_"+oItem.lib);
				}
			}
			
			public function initDetail():void
			{
				if(oItem){
					dgDetail.removeAllElements();
					switch(oItem.type) 
					{ 
						case "a":
							var eA:gA = new gA();
							eA.oConcept = oItem;
							eA.idDico = this.idDico;
							dgDetail.addElement(eA);
							break; 
						case "m": 
							var eM:gM = new gM();
							eM.idDico = this.idDico;
							eM.oConcept = oItem;
							dgDetail.addElement(eM);
							break; 
						case "s": 
							var eS:gS = new gS();
							eS.idDico = this.idDico;
							eS.oConcept = oItem;
							dgDetail.addElement(eS);
							break; 
						case "v": 
							var eV:gV = new gV();
							eV.oConcept = oItem;
							eV.idDicoConj = this.parentApplication.arrVerifDico["conjugaisons"];
							eV.idDico = this.idDico;
							dgDetail.addElement(eV);
							break; 
						default: 
							var eG:gG = new gG();
							eG.idDico = this.idDico;
							eG.oConcept = oItem;
							eG.bShowTablesLies = true;
							dgDetail.addElement(eG);
							break; 
					}					
				}
				
			}
			
			protected function utilise_resultHandler(event:ResultEvent):void
			{
				arrR = event.result as Array;				
				var actis:String = "";
				if(action == "modifier"){
					actis = "dictionnaire concept : modifier "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : ";
					actis = actis+oItem.type+"_"+oItem.lib+" -> "+arrN["type"]+"_"+arrN["lib"]+" (ref="+idDico+"_"+oItem.id_concept+")";				
				}				
				if(action == "supprimer")
					actis = "dictionnaire concept : supprimer "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : "+oItem.type+"_"+oItem.lib+"... (ref="+idDico+"_"+oItem.id_concept+")";				
				this.parentApplication.verifActi(arrR[0], action, actis, ROC, oItem.id_concept, arrN, idDico);				
			}

			protected function remove_resultHandler(event:ResultEvent):void
			{
				ROC.findByIdDico(idDico);				
			}
			
			protected function conceptType_itemClickHandler(event:ItemClickEvent):void
			{
				ajoutDetail.removeAllElements();
				
				switch(event.currentTarget.selectedValue) 
				{ 
					case "a":
						var eA:gA = new gA();
						eA.idDico = this.idDico;
						eA.cptParent = this;
						ajoutDetail.addElement(eA);
						break; 
					case "m": 
						var eM:gM = new gM();
						eM.idDico = this.idDico;
						eM.cptParent = this;
						ajoutDetail.addElement(eM);
						break; 
					case "s": 
						var eS:gS = new gS();
						eS.idDico = this.idDico;
						eS.cptParent = this;
						ajoutDetail.addElement(eS);
						break; 
					case "v": 
						var eV:gV = new gV();
						eV.idDico = this.idDico;
						eV.idDicoConj = this.parentApplication.arrVerifDico["conjugaisons"];
						eV.cptParent = this;
						ajoutDetail.addElement(eV);
						break; 
					default: 
						var eG:gG = new gG();
						eG.idDico = this.idDico;
						eG.cptParent = this;
						ajoutDetail.addElement(eG);
						break; 
				}									
			}
			
			protected function edit_resultHandler(event:ResultEvent):void
			{
				oItem.lib = arrN["lib"];
				oItem.type = arrN["type"];
				arrN=new Array;
				initDetail();
				bModif = true;
			}
			
			protected function dg_itemEditEndHandler(event:DataGridEvent):void
			{
				if(!bModif || oItem == null) return;
				// Get the cell editor and cast it to TextInput.
				var myEditor:TextInput = TextInput(event.currentTarget.itemEditorInstance);
				// Get the new value from the editor.
				if(event.dataField=="lib"){
					arrN["lib"]=myEditor.text;					
					arrN["type"]=oItem.type;
				}
				if(event.dataField=="type"){
					arrN["lib"]=oItem.lib;					
					arrN["type"]=myEditor.text;
				}
				if(bModif && (arrN["lib"]!=oItem.lib || arrN["type"]!=oItem.type)){
					action = "modifier";
					bModif = false;
					ROC.utilise(oItem.id_concept, oItem.type+"_"+oItem.lib);
				}				
			}

			protected function btnExport_clickHandler(event:MouseEvent):void
			{
				if(oItem){
					var url:String = this.parentApplication.ENDPOINT_EXPORT+"?idDico=" + oItem.id_dico+"&idCpt=" + oItem.id_concept;
					navigateToURL(new URLRequest(url), '_blank');				
				}else
					Alert.show("Veuillez sélectionner un item.","Exportation d'un item");				

			}
			
			protected function btnRecherche_clickHandler(event:MouseEvent):void
			{
				if(tiRecherche.text!="") ROC.findByGenDico(tiRecherche.text, idDico);
				
			}
			
			protected function findByGenDico_resultHandler(event:ResultEvent):void
			{
				if(event.result){
					var arr:Array = event.result as Array;
					dg.dataProvider = arr;
				}				
			}
			
			protected function btnToutAfficher_clickHandler(event:MouseEvent):void
			{
				dgFilter.resetFilter();
			}
			
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<s:RemoteObject id="ROC"
						 source="Model_DbTable_Gen_concepts" destination="zend" 
						 showBusyCursor="true"
						 fault="faultHandlerService(event)">
			<s:method name="edit" result="edit_resultHandler(event)" />  	
			<s:method name="findByIdDico" result="findByDico_resultHandler(event)" /> 
			<s:method name="utilise" result="utilise_resultHandler(event)" />
			<s:method name="remove" result="remove_resultHandler(event)" />
			<s:method name="findByGenDico" result="findByGenDico_resultHandler(event)" />
		</s:RemoteObject>
		<s:RadioButtonGroup id="conceptType" itemClick="conceptType_itemClickHandler(event)"/>
	</fx:Declarations>
	<mx:ViewStack id="vs" width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" id="lecture" >		
			<s:VGroup width="100%" height="100%" id="detail" >
				<compo:hbFilterControl id="dgFilter"  />
				<mx:HBox width="100%" >
					<mx:Label text="Recherche :"/>
					<mx:TextInput id="tiRecherche" width="100%"/>
					<mx:Button label="Trouver" click="btnRecherche_clickHandler(event)" />					
					<mx:Button label="Tout afficher" click="btnToutAfficher_clickHandler(event)" />					
				</mx:HBox>				
				<mx:HDividedBox id="dgDivBox" width="100%" height="100%" >
					<s:VGroup width="200" height="100%" >
						<s:HGroup>
							<mx:LinkButton visible="{bRemove}" width="20" click="removeItem()"
										   icon="@Embed('images/DeleteRecord.png')" toolTip="{'Supprimer un item'}"/>
							<mx:LinkButton id="btnAddNew" visible="{bAjout}" width="20" click="{vs.selectedChild = ecriture;}"
										   icon="@Embed('images/AddRecord.png')" toolTip="{'Ajouter un item'}"/>
							<s:Button id="btnExport" click="btnExport_clickHandler(event)" label="Exporter" toolTip="Exporter un item" />
						</s:HGroup>
						<mx:DataGrid id="dg" width="100%" height="100%" click="selectDgItem(event);" editable="false" itemEditEnd="dg_itemEditEndHandler(event)" >
							<mx:columns>
								<mx:DataGridColumn dataField="id_concept" editable="false" visible="false" headerText="id_concept" />
								<mx:DataGridColumn dataField="lib" headerText="Descripteur" />
								<mx:DataGridColumn dataField="type" headerText="Type" />
							</mx:columns>
						</mx:DataGrid>
					</s:VGroup>
					<s:Group id="dgDetail" width="100%" height="100%" >
						
					</s:Group>
				</mx:HDividedBox>
			</s:VGroup>
			
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="ecriture" >
			<s:VGroup width="100%" height="100%" >
				<s:HGroup verticalAlign="middle">					
					<s:Label text="Choisissez un type de concept" />
					<s:RadioButton groupName="conceptType" value="a" id="A" label="Adjectif" />
					<s:RadioButton groupName="conceptType" value="m" id="M" label="Substantif" />
					<s:RadioButton groupName="conceptType" value="s" id="S" label="Syntagme" />
					<s:RadioButton groupName="conceptType" value="v" id="V" label="Verbe" />
					<s:RadioButton groupName="conceptType" value="g" id="G" label="Autres" />
				</s:HGroup>
				<s:Group id="ajoutDetail" width="100%" height="100%" >
					
				</s:Group>
			</s:VGroup>				
		</mx:Canvas>
	</mx:ViewStack>					
</s:Group>
