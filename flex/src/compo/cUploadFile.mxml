<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	top="10" bottom="10" left="10" right="10"
	creationComplete="initApp()">
	<mx:Script>
        <![CDATA[
        
            /*
            
            Examples_FileUpload
            
            Written by:
            Dustin Andrew
            dustin@flash-dev.com
            www.flash-dev.com
			
			CUSTOM BY samuel szoniecky
            
            */                   
			import mx.managers.PopUpManager;
			
			import com.adobe.serialization.json.JSON;

			import mx.controls.Alert;
            import mx.controls.Button;
            import mx.controls.LinkButton;
            import mx.controls.List;
            
            import compo.twResultImport;
            import compo.twWinProgress;

			[Bindable]public var wf:String;
			[Bindable]public var idExi:String;
			[Bindable]public var objName:String;
			[Bindable]public var objProp:String;
			[Bindable]public var lblBtn:String;
           	[Bindable]public var iconBtn:Class;
           	[Bindable]public var ttBtn:String;            	 
			[Bindable]public var ctlBind:Object;
			[Bindable]public var typeFic:String;
			[Bindable]public var UploadScript:String;
			[Bindable]public var paramArr:Array;
			
            private var _arrUploadFiles:Array;
            private var _numCurrentUpload:Number = 0;
            private var _refAddFiles:FileReferenceList;    
            private var _refUploadFile:FileReference;
            
            private var _winProgress:twWinProgress;
            private var twResult:twResultImport;
            
            private function initApp():void {
                Security.allowDomain("*");
                _arrUploadFiles = new Array();
				UploadScript = this.parentApplication.ENDPOINT_IMPORT;

            }            
            
            // Called to add file(s) for upload
            private function addFiles():void {
                _refAddFiles = new FileReferenceList();
                _refAddFiles.addEventListener(Event.SELECT, onSelectFile);
                _refAddFiles.browse();
            }

            // Called to add file(s) for upload direct
            private function addFilesDirect():void {
				/**
				 */
				if(objName=='Model_DbTable_Gen_dicos'){
					paramArr = ctlBind.getParamAjout();
					if(paramArr == null) return;
				}
								
				if(_arrUploadFiles)_arrUploadFiles=new Array();
				
				var filter:FileFilter;
				if(typeFic=="images"){
					filter = new FileFilter("Images (*.jpg, *.jpeg, *.png)", "*.jpg; *.jpeg; *.png");					
				}
				if(typeFic=="csv"){
					filter = new FileFilter("Fichier CSV (*.txt, *.rtf, *.csv)", "*.txt; *.rtf; *.csv");					
				}
				if(typeFic=="models"){
					filter = new FileFilter("Fichier ODT (*.odt)", "*.odt");					
				}
				if(typeFic=="all"){
					filter = new FileFilter("All (*.*)", "*.*");					
				}
				var Types:Array = new Array(filter);
				
                _refAddFiles = new FileReferenceList();
                _refAddFiles.addEventListener(Event.SELECT, onSelectFileDirect);
                if(filter){
	                _refAddFiles.browse(Types);            	
                }else{
	                _refAddFiles.browse();            	
                }
            }


            private function onSelectFileDirect(event:Event):void {
                if (_refAddFiles.fileList.length >= 1) {
                    for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
                        _arrUploadFiles.push({label:_refAddFiles.fileList[k].name, data:_refAddFiles.fileList[k]});
                    }
                }                
            	//_arrUploadFiles
            	startUpload(true);
            } 

            
            // Called to remove selected file(s) for upload
            private function removeFiles():void {
                var arrSelected:Array = listFiles.selectedIndices;
                for (var i:Number = 0; i < arrSelected.length; i++) {
                    _arrUploadFiles[Number(arrSelected[i])] = null;
                }
                for (var j:Number = 0; j < _arrUploadFiles.length; j++) {
                    if (_arrUploadFiles[j] == null) {
                        _arrUploadFiles.splice(j, 1);
                        j--;
                    }
                }
                listFiles.dataProvider = _arrUploadFiles;
                listFiles.selectedIndex = 0;
                if (_arrUploadFiles.length == 0) {
                    btnUpload.enabled = false;
                } else {
                    btnUpload.enabled = true;
                }
            }
            
            // Called when a file is selected
            private function onSelectFile(event:Event):void {
                var arrFoundList:Array = new Array();
                // Get list of files from fileList, make list of files already on upload list
                for (var i:Number = 0; i < _arrUploadFiles.length; i++) {
                    for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
                        if (_arrUploadFiles[i].label == _refAddFiles.fileList[j].name) {
                            arrFoundList.push(_refAddFiles.fileList[j].name);
                            _refAddFiles.fileList.splice(j, 1);
                            j--;
                        }
                    }
                }
                if (_refAddFiles.fileList.length >= 1) {
                    for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
                        _arrUploadFiles.push({label:_refAddFiles.fileList[k].name, data:_refAddFiles.fileList[k]});
                    }
                    listFiles.dataProvider = _arrUploadFiles;
                    listFiles.selectedIndex = _arrUploadFiles.length - 1;
                }                
                if (arrFoundList.length >= 1) {
                    Alert.show("The file(s): \n\n• " + arrFoundList.join("\n• ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
                }
                if (_arrUploadFiles.length == 0) {
                    btnUpload.enabled = false;
                } else {
                    btnUpload.enabled = true;
                }
            }
            
            
            // Cancel and clear eventlisteners on last upload
            private function clearUpload():void {
                _numCurrentUpload = 0;
                _refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
                _refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
                _refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
                _refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
                _refUploadFile.cancel();
            }
            
            // Called to upload file based on current upload number
            private function startUpload(booIsFirst:Boolean):void {
                if (booIsFirst) {
                    _numCurrentUpload = 0;
                }
                if (_arrUploadFiles.length > 0) {
                    _winProgress = twWinProgress(PopUpManager.createPopUp(this, twWinProgress, true));
                    _winProgress.btnCancel.removeEventListener("click", onUploadCanceled);
                    _winProgress.btnCancel.addEventListener("click", onUploadCanceled);
                    _winProgress.title = "Téléchargement du fichier vers le serveur...";
                    _winProgress.txtFile.text = _arrUploadFiles[_numCurrentUpload].label;
                    _winProgress.progBar.label = "0%";
                    PopUpManager.centerPopUp(_winProgress);
                    
                    // Variables to send along with upload
                    var sendVars:URLVariables = new URLVariables();
                    //sendVars.f = "upload";
                    sendVars.wf = wf;
                    sendVars.idExi = idExi;
                    sendVars.objName = objName;
					//sendVars.idBase = this.parentApplication.idBase;
                    
					//récupération de l'identifiant d'objet
                    if(objName=='Model_DbTable_Gen_dicos'){
                    	sendVars.objId = ctlBind.idOeu;
						sendVars.idConj = this.parentApplication.arrVerifDico["conjugaisons"];
						sendVars.langue = paramArr["langue"];
						sendVars.nom = paramArr["nom"];
						sendVars.type = paramArr["type"];
						sendVars.licence = paramArr["licence"];
                    }
					
                    					
					var request:URLRequest = new URLRequest();
					request.data = sendVars;
					request.url = UploadScript;
					request.method = URLRequestMethod.POST;
					_refUploadFile = new FileReference();
					_refUploadFile = _arrUploadFiles[_numCurrentUpload].data;
					_refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
					_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
					_refUploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
					_refUploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
					_refUploadFile.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadDataComplete);
					_refUploadFile.upload(request, "file", false);
					
					
                }
            }

            // Called on upload data complete
			private function onUploadDataComplete(event:DataEvent):void{
				try{
					//var result:XML = new XML(event.data);
					//Alert.show(event.toString(), "Test de l'importation");
					//gestion de la réponse au upload
					var result:Object = JSON.decode(event.data);
					if(result.error==0 && event.data && event.data != "null"){
						if(wf=="auton"){
                            if(objName=='Model_DbTable_Gen_dicos'){
								Alert.show("Le dictionnaire est importé.", "Succés du téléchargement");
 			                   	ctlBind.resultImport(result);
            		        }
						}
						if(wf=="impCsv"){
		                    Alert.show("Les données sont importées.", "Succés de l'importation");
							ctlBind.fill();
							/*
	                    	twResult = twResultImport(PopUpManager.createPopUp(this, twResultImport, true));
	                    	twResult.result = result;
		                    PopUpManager.centerPopUp(twResult);
		                    */						
						}
						if(wf=="models"){
		                    Alert.show("Le modèle est ajouté.", "Succés du téléchargement");
		                   	ctlBind.cbModel.init();
						}															
					}else{
	                    Alert.show(result.error, "Echec du téléchargement");					
					}
				}catch (err:Error){
                    Alert.show(err.message, "Echec du téléchargement");					
				}
					
			}
            
            // Called on upload cancel
            private function onUploadCanceled(event:Event):void {
                PopUpManager.removePopUp(_winProgress);
                _winProgress == null;
                _refUploadFile.cancel();
                clearUpload();
            }
            
            // Get upload progress
            private function onUploadProgress(event:ProgressEvent):void {
                var numPerc:Number = Math.round((Number(event.bytesLoaded) / Number(event.bytesTotal)) * 100);
				if(numPerc==100 && objName=='Model_DbTable_Gen_dicos'){
					_winProgress.title = "Traitement du fichier sur le serveur...";
					_winProgress.txtFile.text = "Le fichier est en cours de traitement... merci de patienter...";
					numPerc = 50;
				}
                _winProgress.progBar.setProgress(numPerc, 100);
                _winProgress.progBar.label = numPerc + "%";
                _winProgress.progBar.validateNow();
                if (numPerc > 50) {
                    _winProgress.btnCancel.enabled = false;
                } else {
                    _winProgress.btnCancel.enabled = true;
                }
            }
            
            // Called on upload complete
            private function onUploadComplete(event:Event):void {
                _numCurrentUpload++;
                PopUpManager.removePopUp(_winProgress);
                if (_numCurrentUpload < _arrUploadFiles.length) {
                    startUpload(false);
                } else {
                    //Alert.show("Le fichier est téléchargé sur le serveur.", "Succés du téléchargement");
                }
            }
            
            // Called on upload io error
            private function onUploadIoError(event:IOErrorEvent):void {
                Alert.show("IO erreur durant le téléchargement du fichier.", "Erreur");
                PopUpManager.removePopUp(_winProgress);
                _winProgress == null;
                _refUploadFile.cancel();
                clearUpload();
            }
            
            // Called on upload security error
            private function onUploadSecurityError(event:SecurityErrorEvent):void {
                Alert.show("Erreur de sécurité durant le téléchargement du fichier.", "Erreur");
                PopUpManager.removePopUp(_winProgress);
                _winProgress == null;
                _refUploadFile.cancel();
                clearUpload();
            }
            
        ]]>
    </mx:Script>

        <mx:Panel width="0" height="0" layout="absolute" horizontalCenter="0" verticalCenter="0" id="panUpload" title="Select file(s) for upload">
            <mx:VBox left="10" bottom="10" top="10" right="10">
                <mx:List width="100%" id="listFiles" height="100%" allowMultipleSelection="true"/>
                <mx:HBox width="100%" horizontalAlign="center">
                    <mx:Button label="Add file(s).." id="btnAdd" click="addFiles()"/>
                    <mx:Button label="Remove file(s)" id="btnRemove" click="removeFiles()"/>
                </mx:HBox>
            </mx:VBox>
            <mx:ControlBar horizontalAlign="right">
                <mx:Button label="Upload file(s)" id="btnUpload" click="startUpload(true)" enabled="false"/>
            </mx:ControlBar>
        </mx:Panel>
        <!-- <mx:Button width="20" label="{lblBtn}" id="btnAddDirect" click="addFilesDirect()"/> -->
		<mx:LinkButton label="{lblBtn}" icon="{iconBtn}" toolTip="{ttBtn}" id="btnAddDirect" click="addFilesDirect()"/>
</mx:Canvas>
