<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:co="compo.*"
	creationComplete="init()" 
	width="100%" height="100%" xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
        <![CDATA[
			import compo.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IViewCursor;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.ComboBox;
			import mx.controls.DataGrid;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.listClasses.IDropInListItemRenderer;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.components.ComboBox;

	/**
	 * paramétrage de l'objet
	 */
	[Bindable] public var bInit:Boolean=true;
	[Bindable] public var bInsert:Boolean=true;
	[Bindable] public var twAR:twAjoutRef;
	[Bindable] public var idOeu:int;	
	[Bindable] public var arrDicoAssos:Array;	
	[Bindable] public var arrDicoGen:Array;	
	[Bindable] public var arrDicoCon:Array;	
	[Bindable] public var arrDicoDet:Array;	
	[Bindable] public var arrDicoSyn:Array;	
	[Bindable] public var arrDicoPrC:Array;	
	[Bindable] public var arrDicoPrS:Array;	
	[Bindable] public var arrDicoNeg:Array;	
	[Bindable] public var arrLangue:Array;
	[Bindable] public var arrType:Array;
	[Bindable] public var item:Object

			private function findItemHandler(e:Object):void {
				item = e.result[0];
				if(item){
					UpdLib.text = item.lib;
					cc.ccItem = item.licence;
					cc.showSelect();
				}
			}
			
			private function findDicoHandler(e:Object):void {
				if(!e)return;
				var dp:Array = e.result as Array;
				if(dp[0].type=="concepts")arrDicoGen=dp;
				if(dp[0].type=="conjugaisons")arrDicoCon=dp;
				if(dp[0].type=="déterminants")arrDicoDet=dp;
				if(dp[0].type=="syntagmes")arrDicoSyn=dp;
				if(dp[0].type=="pronoms_complement")arrDicoPrC=dp;
				if(dp[0].type=="pronoms_sujet")arrDicoPrS=dp;
				if(dp[0].type=="négations")arrDicoNeg=dp;
			}
			
			public function init():void 
			{
			    //chargement des données
			    if(bInit){
					RO.findByIdOeu(idOeu);
					ROODU.findByIdOeu(idOeu);
					ROD.findByType("concepts");
					ROD.findByType("conjugaisons");
					ROD.findByType("déterminants");
					ROD.findByType("syntagmes");
					ROD.findByType("pronoms_complement");
					ROD.findByType("pronoms_sujet");
					ROD.findByType("négations");
					ROD.getLangue();
					ROD.getType();
				}
			    if(bInsert)vsParam.selectedChild=insert;
				if(vsParam.selectedChild==licence){
					vsParam.selectedChild = view;
					RO.findByIdOeu(idOeu);
				}
			        
			}
			
			private function updateItem():void
			{
				//création du tableau de valeur
				var vn:Array = new Array();
				
				vn["lib"] = UpdLib.text;
				
				RO.edit(idOeu,vn);	
			}
			
			private function insertAnnuler():void {
				if(this.bInsert){
					twAR.ferme();
				}else{
					vsParam.selectedChild = view;
				}
			}
			
			private function insertItem():void {
			
				//création du tableau de param
				var pArr:Array = new Array;
				var val:String="";
			    var frmC:Array = insertForm.getChildren();
				//boucle sur chaque composant du modèle
			    for each(var ctl:Object in frmC){
			    	//récupère l'identifiant de la valeur
			    	var ctlId:String=ctl.id;
					//récupère le contrôle d'édition
					var ctlVal:Object=ctl.getChildAt(0);
					//vérifie le type pour récupérer les modifs
			    	if(ctlVal.className=="cbGroupeMot"){
			    		val=ctlVal.cb.selectedItem[ctl.id];
			    	}
			    	if(ctlVal.className=="TextInput" || ctlVal.className=="TextArea"){
			    		val=ctlVal.text;
			    	}
			    	//vérifie si le champ est obligatoire
			    	if(!VerifChampOblig(val, ctlVal))return;
			    	//incrémente le tableau
					pArr[ctlId]=val;
			   	}
				RO.ajouter(pArr);
				
			}
			
			private function VerifChampOblig(val:String, ctlVal:Object):Boolean{
				
				if(val!="")return true;
			
				var verif:Boolean=true;
				
				if(ctlVal.id=="lib"){
					Alert.show("Le libellé est obligatoire.");
					return false;
				}
				
				return verif;
			}
			
			private function insertItemHandler(e:Object):void
			{
				idOeu = e.result;
				vsParam.selectedChild = view;
				RO.getAll();
				//on ajoute l'utilisateur à l'oeuvre
				var pArr:Array = new Array;
				pArr["id_oeu"]=idOeu;
				pArr["uti_id"]=this.parentApplication.uti.idUti;
				ROOU.ajouter(pArr); 
				if(twAR){
					Alert.show("Veuillez choisir les dictionnaires associés à cette oeuvre.");
					twAR.ferme();
				}
			}
			
			private function fillGridHandler(e:Object, dg:DataGrid):void
			{
				if(!e)return;
				arrDicoAssos = e.result as Array;
			}
			
			private function deleteClickHandler(event:CloseEvent):void
			{
			    if (event.detail == Alert.YES) 
			    {
					RO.remove(idOeu);
			    }
			}
			
			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				Alert.show(str, "ERREUR : Oeuvres");
			}
			 
			public function resultHandlerService(result:ResultEvent):void
			{
				RO.getAll();
			}
			
			private function DicoHandler(e:Object):void
			{
				vsDico.selectedChild = viewDico;
				ROODU.findByIdOeu(idOeu);
			}
			
			private function deleteDico():void {
			    
			    if (this.dgDico.selectedItem)
			    {
			        Alert.show("Confirmez-vous la suppression du dictionnaire pour cette oeuvre ?",
			        "Confirmation Suppression", 3, this, deleteDicoClickHandler);
			    }
			    
			}
			private function deleteDicoClickHandler(event:CloseEvent):void
			{
			    if (event.detail == Alert.YES) 
			    {
					ROODU.remove(idOeu, dgDico.selectedItem['id_dico'], this.parentApplication.uti.idUti);
			    }
			}
			private function AjouterDicoOeuvre():void
			{
				var params:Array=new Array();
				if(cbDicoGen.selectedIndex!=-1)params.push(cbDicoGen.selectedItem['id_dico']);

				if(cbDicoCon.selectedIndex!=-1)params.push(cbDicoCon.selectedItem['id_dico']);

				if(cbDicoDet.selectedIndex!=-1)params.push(cbDicoDet.selectedItem['id_dico']);

				if(cbDicoSyn.selectedIndex!=-1)params.push(cbDicoSyn.selectedItem['id_dico']);

				if(cbDicoPrC.selectedIndex!=-1)params.push(cbDicoPrC.selectedItem['id_dico']);

				if(cbDicoPrS.selectedIndex!=-1)params.push(cbDicoPrS.selectedItem['id_dico']);

				if(cbDicoNeg.selectedIndex!=-1)params.push(cbDicoNeg.selectedItem['id_dico']);
				
				ROODU.ajouter(idOeu, this.parentApplication.uti.idUti, params);
					
			}
			private function selectDicoDefautLangue():void{
				var l:String = cbLangue.selectedItem["langue"];
				var filtreDicoLangueDefaut:Function = function(item:*, index:int, array:Array):void {
					if(item.general==1 && item.langue == l) this.selectedIndex=index;
				};
				arrDicoGen.filter(filtreDicoLangueDefaut,cbDicoGen);
				arrDicoCon.filter(filtreDicoLangueDefaut,cbDicoCon);
				arrDicoDet.filter(filtreDicoLangueDefaut,cbDicoDet);
				arrDicoSyn.filter(filtreDicoLangueDefaut,cbDicoSyn);
				arrDicoPrC.filter(filtreDicoLangueDefaut,cbDicoPrC);
				arrDicoPrS.filter(filtreDicoLangueDefaut,cbDicoPrS);
				arrDicoNeg.filter(filtreDicoLangueDefaut,cbDicoNeg);

			}
			
			protected function getLangueHandler(e:ResultEvent):void
			{
				if(!e)return;
				arrLangue = e.result as Array;
			}
			
			
			protected function editHandler(event:ResultEvent):void
			{
				init();
			}
			
			protected function ajouterDicoclickHandler(event:MouseEvent):void
			{
				var pArr:Array = new Array;

				if(nomDico.text==""){
					Alert.show("Veuillez donner un nom à votre dictionnaire.","Ajout dictionnaire");
					return;
				}
				if(cbDicoType.selectedIndex==-1){
					Alert.show("Veuillez sélectionner un type de dictionnaire.","Ajout dictionnaire");
					return;
				}
				if(cbLangueAjout.selectedIndex==-1){
					if(cbLangueAjout.text!="choisissez une langue"){
						pArr["langue"]=cbLangueAjout.text;						
					}else{
						Alert.show("Veuillez sélectionner une langue pour votre dictionnaire.","Ajout dictionnaire");
						return;						
					}
				}else{
					pArr["langue"]=cbLangueAjout.selectedLabel;
				}
				
				pArr["nom"]=nomDico.text;
				pArr["type"]=cbDicoType.selectedLabel;
				pArr["licence"]=ccAjout.ccItem;
				
				ROD.ajouter(pArr,false);
			}
			
			protected function getTypeHandler(e:ResultEvent):void
			{
				if(!e)return;
				arrType = e.result as Array;
			}
			
			protected function ajouterDico_resultHandler(event:ResultEvent):void
			{
				var params:Array=new Array();
				params.push(event.result);
				ROODU.ajouter(idOeu, this.parentApplication.uti.idUti, params);				
			}
									
			protected function dgDico_clickHandler(event:MouseEvent):void
			{
				var item:Object=event.currentTarget.selectedItem;
				if(item){
					detailDico.visible = true;
					detailDico.oItem = item;
					detailDico.init();
				}
				
			}
			
			protected function ajoutDicoUti_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function ajoutOeuvreUti_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
						
			protected function changeCC_clickHandler(event:MouseEvent):void
			{
				var data:Array = new Array;
				data["licence"]= this.ccModif.ccItem;
				RO.edit(idOeu, data);
			}
			
		]]>
    </mx:Script>
    
	<mx:RemoteObject id="RO"
	    	source="Model_DbTable_Gen_oeuvres" destination="zend" 
	    	showBusyCursor="true"
	    	fault="faultHandlerService(event)">
		<mx:method name="findByIdOeu"  result="findItemHandler(event)"/>  	
	 	<mx:method name="edit" result="editHandler(event)"   />  	
	 	<mx:method name="remove"  result="resultHandlerService(event)"/>  	
	 	<mx:method name="ajouter"  result="insertItemHandler(event)"/>  	
	 	<mx:method name="csv"  result="resultHandlerService(event)"/>  	
	</mx:RemoteObject>

	<mx:RemoteObject id="ROODU"
	    	source="Model_DbTable_Gen_oeuvresxdicosxutis" destination="zend" 
	    	showBusyCursor="true"
	    	fault="faultHandlerService(event)">
		<mx:method name="findByIdOeu"  result="fillGridHandler(event,dgDico)"/>  	
	 	<mx:method name="remove"  result="DicoHandler(event)"/>  	
	 	<mx:method name="ajouter"  result="DicoHandler(event)"/>  	
	</mx:RemoteObject>

	<mx:RemoteObject id="ROD"
					 source="Model_DbTable_Gen_dicos" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event)">
		<mx:method name="findByType" result="findDicoHandler(event)"/>  	
		<mx:method name="getLangue" result="getLangueHandler(event)" />  	
		<mx:method name="getType" result="getTypeHandler(event)" />  	
		<mx:method name="ajouter" result="ajouterDico_resultHandler(event)"  />  	
	</mx:RemoteObject>
	
	<mx:RemoteObject id="ROOU"
					 source="Model_DbTable_Gen_oeuvresxutis" destination="zend" 
					 showBusyCursor="true"
					 fault="faultHandlerService(event)">
		<mx:method name="ajouter" result="ajoutOeuvreUti_resultHandler(event)" />  	
	</mx:RemoteObject>
	
	<mx:ViewStack id="vsParam" width="100%" height="100%" >			
		<mx:Canvas id="view" width="100%" height="100%">
			<mx:HBox width="100%" >
				<mx:Label fontSize="16" text="Titre de l'oeuvre :" /><mx:TextInput id="UpdLib" /><mx:Button label="Modifier" click="updateItem()" />
				<co:gLicence id="cc" click="{vsParam.selectedChild = licence;}" toolTip="Cliquez sur l'image pour plus d'information ou pour changer de licence." />
			</mx:HBox>
			<mx:TabNavigator y="30" width="100%" height="100%">
				<s:NavigatorContent width="100%" height="100%" id="ncParam" label="Paramétrer">
							<mx:VBox width="100%" height="100%">						
								<mx:Panel title="Dictionnaires associés" width="100%" height="100%" layout="absolute">
									<mx:ViewStack id="vsDico" width="100%" height="100%" >
										<mx:VBox id="viewDico" width="100%" height="100%" >
											<mx:HBox height="24">
												<mx:LinkButton click="vsDico.selectedChild = insertDico;" width="20" icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un dictionnaire à cette oeuvre" />
												<mx:LinkButton click="deleteDico()" width="20" icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer un dictionnaire pour cette oeuvre" />							
											</mx:HBox>							
											<mx:DataGrid width="100%" id="dgDico" click="dgDico_clickHandler(event)" dataProvider="{arrDicoAssos}"
												 rowCount="3" >
												<mx:columns>
													<mx:DataGridColumn headerText="Nom" dataField="nom" />
													<mx:DataGridColumn headerText="Type" dataField="type" />
													<mx:DataGridColumn headerText="Langue" dataField="langue" />
													<mx:DataGridColumn headerText="Id Dico" dataField="id_dico" visible="false"/>
												</mx:columns>
											</mx:DataGrid>
											<co:gDico id="detailDico" visible="false" />
										</mx:VBox>
										<mx:HBox id="insertDico" width="100%" height="100%" >
											<mx:VBox borderStyle="solid" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" width="320" height="100%">
												<mx:Label text="Sélectionner les dictionnaires par défaut d'une langue :"/>
												<mx:ComboBox id="cbLangue"  prompt="langue" labelField="langue" change="selectDicoDefautLangue()" dataProvider="{arrLangue}" />
												<mx:Label text="ou choisissez un dictionnaire par type :"/>
												<mx:ComboBox id="cbDicoGen"  prompt="concepts" dataProvider="{arrDicoGen}" labelField="nom" />
												<mx:ComboBox id="cbDicoCon"  prompt="conjugaisons" dataProvider="{arrDicoCon}" labelField="nom" />
												<mx:ComboBox id="cbDicoDet"  prompt="déterminants" dataProvider="{arrDicoDet}" labelField="nom" />
												<mx:ComboBox id="cbDicoSyn"  prompt="syntagmes" dataProvider="{arrDicoSyn}" labelField="nom" />
												<mx:ComboBox id="cbDicoPrC"  prompt="pronoms compléments" dataProvider="{arrDicoPrC}" labelField="nom" />
												<mx:ComboBox id="cbDicoPrS"  prompt="pronoms sujets" dataProvider="{arrDicoPrS}" labelField="nom" />
												<mx:ComboBox id="cbDicoNeg"  prompt="négations" dataProvider="{arrDicoNeg}" labelField="nom" />
												<mx:HBox>
													<mx:Button label="Enregistrer" click="AjouterDicoOeuvre();" />										
													<mx:Button label="Annuler" click="vsDico.selectedChild = viewDico;" />				
												</mx:HBox>
											</mx:VBox>
											<mx:VBox borderStyle="solid" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" width="100%" height="100%">
												<mx:Label text="Créer un dictionnaire :"/>
												<mx:HBox><mx:Label text="Nom :" /><mx:TextInput id="nomDico" /></mx:HBox>
												<mx:HBox>
													<mx:Label text="Type :" /><mx:ComboBox id="cbDicoType"  prompt="choisissez un type" dataProvider="{arrType}" labelField="type" />
												</mx:HBox>
												<mx:ComboBox id="cbLangueAjout"  prompt="choisissez une langue" labelField="langue" dataProvider="{arrLangue}" editable="true" />											
												<mx:Label text="Choisissez une licence :" />
												<co:gLicence id="ccAjout" bModif="true" />			

												<mx:HBox>
													<mx:Button label="Ajouter" click="ajouterDicoclickHandler(event)"/>
													<mx:Button label="Annuler" click="vsDico.selectedChild = viewDico;" />															
												</mx:HBox>
											</mx:VBox>
										</mx:HBox>
									</mx:ViewStack>											
								</mx:Panel>
							</mx:VBox>
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="Ecrire">
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="Participer" >
					<co:gActiUti id="gParticipe" idUti="{this.parentApplication.uti.idUti}" />
				</s:NavigatorContent>
			</mx:TabNavigator>
		</mx:Canvas>
		<mx:VBox id="insert" width="100%" height="600">			
			<mx:Form id="insertForm" >			                    		
				<mx:FormItem label="Nom de l'oeuvre :" id="lib" >
					<mx:TextInput />
				</mx:FormItem>
			</mx:Form>			
			<mx:HBox >
				<mx:Button label="Enregistrer" click="insertItem()" />
				<mx:Button label="Annuler" click="insertAnnuler()" />				
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="licence" width="100%" height="100%">
			<mx:HBox verticalAlign="middle"  >
				<mx:Label fontSize="16" text="Cliquer sur la licence que vous voulez enregistrer." />
				<mx:Button label="Enregistrer" click="changeCC_clickHandler(event)" />
				<mx:Button label="Annuler" click="{vsParam.selectedChild = view;}" />				
			</mx:HBox>
			<co:gLicence id="ccModif" bModif="true" ccItem="{item.licence}" />			
		</mx:VBox>

	</mx:ViewStack>

	 
</mx:VBox>
