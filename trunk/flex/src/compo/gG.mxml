<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:compo="compo.*" xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	<s:layout>
		<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
						
			[Bindable] public var oConcept:Object;
			[Bindable] public var idDico:String;
			[Bindable] public var idGen:String;
			[Bindable] public var valGen:String;
			[Bindable] public var donnee:Object;
			[Bindable] public var testGen:Object;
			[Bindable] public var bRemove:Boolean=true;
			[Bindable] public var bAjout:Boolean=true;
			[Bindable] public var cptParent:gConcept;
			[Bindable] public var bChange:Boolean=false;
			[Bindable] public var arrChange:Array=new Array;
			private var action:String="";
			private var arrR:Array;
			private var newVal:String;	

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				Alert.show(str, "ERREUR : Détail Teste Génératif");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(oConcept && this.parentApplication.verifDico()){
					ROCG.findByIdConcept(oConcept.id_concept);
				}else{
					vs.selectedChild = ecriture;
				}

			}
			
			protected function findByIdConcept_resultHandler(event:ResultEvent):void
			{
				var arr:Array = event.result as Array;
				dg.dataProvider = arr;
				vs.selectedChild = lecture;
				//réinitialise le tableau génral des concepts
				this.parentApplication.allConcept=null;
			}

			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(G.text);
					arrO.push(GT);
					this.parentApplication.testerGen(arrT,arrO);
				}
			}

			private function selectDgItem(event:Event):void {
				
				donnee=event.currentTarget.selectedItem;
				if(donnee){
					bChange = true;
					//récupère les éléments génératifs du texte
					var arrGdeb:Array = String(donnee.valeur).split("[");
					for each(var g:String in arrGdeb){
						var arrGFin:Array = g.split("]");
					}
				}

			}			
			private function removeItem():void {
				
				Alert.show("Confirmez-vous la suppression de l'item ?",
					"Confirmation Suppression", 3, this, removeItemHandler);				
			}
			
			private function removeItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{
					ROCG.remove(donnee.id_gen, oConcept.id_concept);
				}
			}
			

			public function enregistrer_clickHandler():void
			{
				action = "modifier";
				donnee.valeur = editGen.txtGen.text;
				arrChange["valeur"] = editGen.txtGen.text;				
				ROCG.utilise(donnee.id_gen);				
			}
			
			private function ajouter():void
			{
				//vérification des types incompatibles
				if(typeA.text == "a" || typeA.text == "s" || typeA.text == "g" || typeA.text == "m" || typeA.text == "v"){
					Alert.show("Le type que vous avez saisie n'est pas valide.\nMerci de le changer.","Vérification Ajout");
					return;					
				}
				
				oConcept = new Object;
				oConcept.lib =libA.text; 
				
				var arrCpt:Array = new Array();
				arrCpt["id_dico"]=idDico;
				arrCpt["lib"]=libA.text;
				arrCpt["type"]=typeA.text;
				ROC.ajouter(arrCpt, true, true);								
			}

			private function ajouterGen():void
			{				
				var arr:Array = new Array();
				arr["id_dico"]=idDico;
				arr["valeur"]=ecrireGen.txtGen.text;
				ROCG.ajouter(oConcept.id_concept, arr);								
			}
			
			protected function utilise_resultHandler(event:ResultEvent):void
			{
				arrR = event.result as Array;
				var actis:String = "";
				if(action == "modifier"){
					actis = "dictionnaire concept : modifier "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : ";
					actis = actis + oConcept.type+"_"+oConcept.lib+" "+donnee.valeur;
					actis = actis + " -> " + oConcept.type+"_"+oConcept.lib+" "+arrChange["valeur"];
					actis = actis + " (ref="+idDico+"_"+oConcept.id_concept+")";				
					this.parentApplication.verifActi(arrR[0], action, actis, ROCG, donnee.id_gen, arrChange, idDico);									
				}				
			}
						
			protected function t_changeHandler(event:TextOperationEvent):void
			{
				var tx:TextInput = event.target as TextInput;
				tx.setStyle("color","red");
				arrChange[tx.id] = tx.text;
				bChange = true;
			}
			
			
			protected function edit_resultHandler(event:ResultEvent):void
			{
				bChange = false;
				arrChange = new Array;
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			
			protected function ajouterCpt_resultHandler(event:ResultEvent):void
			{
				oConcept = event.result;
				Alert.show("L'item est ajouté.","Ajout d'un item");
				this.cptParent.oItem = oConcept
				this.cptParent.vs.selectedChild = this.cptParent.lecture;
				this.cptParent.ROC.findByIdDico(idDico);
				this.cptParent.initDetail();
				
			}
			
			protected function remove_resultHandler(event:ResultEvent):void
			{
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			
			
			protected function ajouterGen_resultHandler(event:ResultEvent):void
			{
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			public function editGenAnnuler():void{
				vs.selectedChild = lecture;
			}
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<s:RemoteObject id="ROCG"
						 source="Model_DbTable_Gen_generateurs" destination="zend" 
						 showBusyCursor="true"
						 fault="faultHandlerService(event)">
			<s:method name="edit" result="edit_resultHandler(event)" />  	
			<s:method name="findByIdConcept" result="findByIdConcept_resultHandler(event)" />  	
			<s:method name="remove" result="remove_resultHandler(event)" />  	
			<s:method name="ajouter" result="ajouterGen_resultHandler(event)" />  	
			<s:method name="utilise" result="utilise_resultHandler(event)" />  	
		</s:RemoteObject>
		<s:RemoteObject id="ROC"
						source="Model_DbTable_Gen_concepts" destination="zend" 
						showBusyCursor="true"
						fault="faultHandlerService(event)">
			<s:method name="ajouter" result="ajouterCpt_resultHandler(event)" />  	
		</s:RemoteObject>

	</fx:Declarations>
	<mx:ViewStack id="vs" width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" id="lecture" >					
			<s:VGroup width="100%" height="100%" id="detail" >
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="Nom du texte génératif :" /><s:Label text="{oConcept.lib}" />			
					<s:Label text="Type :" /><s:Label text="{oConcept.type}" />			
				</s:HGroup>
				<s:VGroup width="100%" height="100%" >
					<s:HGroup>
						<mx:LinkButton visible="{bRemove}" width="20" click="removeItem()" 
									   icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer un item"/>
						<mx:LinkButton id="btnAddNew" visible="{bAjout}" width="20" click="{vs.selectedChild=ajoutGen}"
									   icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un item"/>					
						<mx:LinkButton id="btnUpdate" visible="{bChange}" width="20" click="{vs.selectedChild=modifGen}"
									   icon="@Embed('images/UpdateRecord.png')" toolTip="Modifier un item"/>					
					</s:HGroup>
					<mx:DataGrid id="dg" width="100%" height="100%" click="selectDgItem(event);" editable="false" >
						<mx:columns>
							<mx:DataGridColumn dataField="id_gen" editable="false" visible="false" headerText="id_gen" />
							<mx:DataGridColumn dataField="valeur" headerText="Descripteur" editable="true" />
						</mx:columns>
					</mx:DataGrid>
				</s:VGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Button label="Tester" click="tester_clickHandler(event)" />
					<s:TextInput width="100%" id="G" text="{'['+oConcept.type+'-'+oConcept.lib+']'}"/>
					<s:Label width="100%" color="#E01919" text="---" id="GT" />
				</s:HGroup>
			</s:VGroup>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="ecriture" >
			<s:VGroup width="100%" height="100%"  >
				<s:HGroup verticalAlign="middle">
					<s:Label text="Nom du concept :" width="112"/><s:TextInput id="libA" text="" />			
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="Type :" width="112"/><s:TextInput id="typeA" text="" /><s:Label text="(ne pas mettre de caractères spéciaux)" />			
				</s:HGroup>
				<s:HGroup height="100%"  >
					<s:Button label="Ajouter" click="ajouter()"  />
					<s:Button label="Annuler" click="{this.cptParent.vs.selectedChild = this.cptParent.lecture;}"  />
				</s:HGroup>
			</s:VGroup>				
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="ajoutGen" >
			<compo:gEcrire id="ecrireGen" width="100%" height="100%" oItem="{donnee}" fctAnnuler="editGenAnnuler" fctEnregistrer="ajouterGen" allConcept="{this.parentApplication.allConcept}" />				
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="modifGen" >
			<s:VGroup width="100%" height="100%"  >
				<compo:gEcrire id="editGen" width="100%" height="100%" oItem="{donnee}" fctAnnuler="editGenAnnuler" fctEnregistrer="enregistrer_clickHandler" allConcept="{this.parentApplication.allConcept}" />				
			</s:VGroup>				
		</mx:Canvas>
	</mx:ViewStack>						
</s:Group>
