<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:compo="compo.*" xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	<s:layout>
		<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
						
			[Bindable] public var oConcept:Object;
			[Bindable] public var idDico:String;
			[Bindable] public var idGen:String;
			[Bindable] public var valGen:String;
			[Bindable] public var donnee:Object;
			[Bindable] public var testGen:Object;
			[Bindable] public var bRemove:Boolean=true;
			[Bindable] public var bAjout:Boolean=true;
			[Bindable] public var bModif:Boolean=true;
			[Bindable] public var cptParent:gConcept;
			[Bindable] public var bChange:Boolean=false;
			[Bindable] public var arrChange:Array=new Array;
			[Bindable] public var bShowTablesLies:Boolean=false;
			private var action:String="";
			private var arrR:Array;
			private var newVal:String;	

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				Alert.show(str, "ERREUR : Détail Teste Génératif");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				bAjout = this.parentApplication.uti.écriture;
				bModif = this.parentApplication.uti.écriture;
				bRemove = this.parentApplication.uti.suppression;
				
				if(oConcept && this.parentApplication.verifDico()){
					ROCG.findByIdConcept(oConcept.id_concept);
					if(oConcept.type=="carac" || oConcept.type=="caract") 
						G.text += "[" + oConcept.type+oConcept.lib+ "]";
					else
						G.text='['+oConcept.type+'-'+oConcept.lib+']';
					if(bShowTablesLies) ROC.findTablesLies(oConcept.id_concept);
				}else{
					vs.selectedChild = ecriture;
				}

			}
			
			protected function findByIdConcept_resultHandler(event:ResultEvent):void
			{
				var arr:Array = event.result as Array;
				dg.dataProvider = arr;
				vs.selectedChild = lecture;
				var dpCol:ArrayCollection = new ArrayCollection();
				dpCol.addItem({data:'any', label:'Tout'});
				dpCol.addItem({data:'lib', label:'Descripteur'});
				dgFilter.dpColumns = dpCol;
				dgFilter.dpRows = arr;
				dgFilter.dg = dg;
				//réinitialise le tableau général des concepts
				this.parentApplication.allConcept=null;
			}

			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(G.text);
					arrO.push(GT);
					this.parentApplication.testerGen(arrT,arrO);
				}
			}

			protected function testItem_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico() && donnee){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(donnee.valeur);
					arrO.push(GT);
					this.parentApplication.testerGen(arrT,arrO);
				}
				
			}
			
			private function selectDgItem(event:Event):void {
				
				donnee=event.currentTarget.selectedItem;
				if(donnee){
					btnTestItem.visible = true;
					bChange = true;
					//récupère les éléments génératifs du texte
					var arrGdeb:Array = String(donnee.valeur).split("[");
					for each(var g:String in arrGdeb){
						var arrGFin:Array = g.split("]");
					}
				}

			}			
			private function removeItem():void {
				
				Alert.show("Confirmez-vous la suppression de l'item ?",
					"Confirmation Suppression", 3, this, removeItemHandler);				
			}
			
			private function removeItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{
					ROCG.remove(donnee.id_gen, oConcept.id_concept);
				}
			}
			

			public function enregistrer(txt:String, oItem:Object):void
			{
				action = "modifier";
				donnee.valeur = txt;
				arrChange["valeur"] = txt;				
				ROCG.utilise(oItem.id_gen);				
			}
			
			private function ajouter():void
			{
				//vérification des types incompatibles
				if(typeA.text == "a" || typeA.text == "s" || typeA.text == "g" || typeA.text == "m" || typeA.text == "v"){
					Alert.show("Le type que vous avez saisie n'est pas valide.\nMerci de le changer.","Vérification Ajout");
					return;					
				}
				
				oConcept = new Object;
				oConcept.lib =libA.text; 
				
				var arrCpt:Array = new Array();
				arrCpt["id_dico"]=idDico;
				arrCpt["lib"]=libA.text;
				arrCpt["type"]=typeA.text;
				ROC.ajouter(arrCpt, true, true);								
			}

			private function ajouterGen(txt:String, item:Object):void
			{				
				var arr:Array = new Array();
				arr["id_dico"]=idDico;
				arr["valeur"]=txt;
				ROCG.ajouter(oConcept.id_concept, arr);								
			}

			private function editGen(txt:String, item:Object):void
			{				
				var arr:Array = new Array();
				arr["valeur"]=txt;
				ROCG.edit(item.id_gen, arr);								
			}
			
			protected function utilise_resultHandler(event:ResultEvent):void
			{
				arrR = event.result as Array;
				var actis:String = "";
				if(action == "modifier"){
					actis = "dictionnaire concept : modifier "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : ";
					actis = actis + oConcept.type+"_"+oConcept.lib+" "+donnee.valeur;
					actis = actis + " -> " + oConcept.type+"_"+oConcept.lib+" "+arrChange["valeur"];
					actis = actis + " (ref="+idDico+"_"+oConcept.id_concept+")";				
					this.parentApplication.verifActi(arrR[0], action, actis, ROCG, donnee.id_gen, arrChange, idDico);									
				}				
			}
						
			protected function t_changeHandler(event:TextOperationEvent):void
			{
				var tx:TextInput = event.target as TextInput;
				tx.setStyle("color","red");
				arrChange[tx.id] = tx.text;
				bChange = true;
			}
			
			
			protected function edit_resultHandler(event:ResultEvent):void
			{
				bChange = false;
				arrChange = new Array;
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			
			protected function ajouterCpt_resultHandler(event:ResultEvent):void
			{
				oConcept = event.result;
				Alert.show("L'item est ajouté.","Ajout d'un item");
				this.cptParent.oItem = oConcept
				this.cptParent.vs.selectedChild = this.cptParent.lecture;
				this.cptParent.ROC.findByIdDico(idDico);
				this.cptParent.initDetail();
				
			}
			
			protected function remove_resultHandler(event:ResultEvent):void
			{
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			
			
			protected function ajouterGen_resultHandler(event:ResultEvent):void
			{
				ROCG.findByIdConcept(oConcept.id_concept);				
			}
			
			public function editGenAnnuler():void{
				vs.selectedChild = lecture;
			}
			
			protected function btnUpdate_clickHandler(event:MouseEvent):void
			{
				var twG:twGen= twGen(
					PopUpManager.createPopUp(this, twGen));
				twG.oItem = donnee;
				twG.fctEnregistrer = enregistrer;
				PopUpManager.centerPopUp(twG);
			}
			
			protected function btnAddNew_clickHandler(event:MouseEvent):void
			{
				var twG:twGen= twGen(
					PopUpManager.createPopUp(this, twGen));
				twG.title = "Ajout d'un générateur";
				twG.fctEnregistrer = ajouterGen;
				PopUpManager.centerPopUp(twG);

			}
			
			protected function findTablesLies_resultHandler(event:ResultEvent):void
			{
				if(event.result){
					var arr:Array = event.result as Array;
					var nc:NavigatorContent = new NavigatorContent;
					nc.percentHeight = 100;
					nc.percentWidth = 100;
					if(arr[0]["nbA"]!=0){
						nc.label = "Adjectifs associés";
						var fA:gA = new gA;
						fA.idDico = this.idDico;
						fA.cptParent = this.cptParent;
						fA.oConcept = this.oConcept;
						fA.bShowConceptsLies = false;
						nc.addElement(fA);
						tn.addElement(nc);
					}
					if(arr[0]["nbM"]!=0){
						nc.label = "Substantifs associés";
						var fM:gM = new gM;
						fM.idDico = this.idDico;
						fM.cptParent = this.cptParent;
						fM.oConcept = this.oConcept;
						fM.bShowConceptsLies = false;
						nc.addElement(fM);
						tn.addElement(nc);
					}
					if(arr[0]["nbS"]!=0){
						nc.label = "Syntagmes associés";
						var fS:gS = new gS;
						fS.idDico = this.idDico;
						fS.cptParent = this.cptParent;
						fS.oConcept = this.oConcept;
						fS.bShowConceptsLies = false;
						nc.addElement(fS);
						tn.addElement(nc);
					}
					if(arr[0]["nbV"]!=0){
						nc.label = "Verbes associés";
						var fV:gV = new gV;
						fV.idDico = this.idDico;
						fV.cptParent = this.cptParent;
						fV.oConcept = this.oConcept;
						fV.bShowConceptsLies = false;
						nc.addElement(fV);
						tn.addElement(nc);
					}
				}
			}
			
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<s:RemoteObject id="ROCG"
						 source="Model_DbTable_Gen_generateurs" destination="zend" 
						 showBusyCursor="true"
						 fault="faultHandlerService(event)">
			<s:method name="edit" result="edit_resultHandler(event)" />  	
			<s:method name="findByIdConcept" result="findByIdConcept_resultHandler(event)" />  	
			<s:method name="remove" result="remove_resultHandler(event)" />  	
			<s:method name="ajouter" result="ajouterGen_resultHandler(event)" />  	
			<s:method name="utilise" result="utilise_resultHandler(event)" />  	
		</s:RemoteObject>
		<s:RemoteObject id="ROC"
						source="Model_DbTable_Gen_concepts" destination="zend" 
						showBusyCursor="true"
						fault="faultHandlerService(event)">
			<s:method name="ajouter" result="ajouterCpt_resultHandler(event)" />
			<s:method name="findTablesLies" result="findTablesLies_resultHandler(event)" />
		</s:RemoteObject>

	</fx:Declarations>
	<mx:ViewStack id="vs" width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" id="lecture" >					
			<s:VGroup width="100%" height="100%" id="detail" >
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="Nom du texte génératif :" /><s:Label text="{oConcept.lib}" />			
					<s:Label text="Type :" /><s:Label text="{oConcept.type}" />			
				</s:HGroup>
				<s:HGroup width="100%" height="100%" >
					<mx:TabNavigator width="100%" height="100%" id="tn" >
						<s:NavigatorContent width="100%" height="100%" label="liste des générateurs" visible="true">
							<s:VGroup width="100%" height="100%" >
								<compo:hbFilterControl id="dgFilter"  />
								<s:HGroup>
									<mx:LinkButton visible="{bRemove}" width="20" click="removeItem()" 
												   icon="@Embed('images/DeleteRecord.png')" toolTip="Supprimer un item"/>
									<mx:LinkButton id="btnAddNew" visible="{bAjout}" width="20" click="btnAddNew_clickHandler(event)" 
												   icon="@Embed('images/AddRecord.png')" toolTip="Ajouter un item"/>					
									<mx:LinkButton id="btnUpdate" visible="{bModif}" width="20" click="btnUpdate_clickHandler(event)" 
												   icon="@Embed('images/UpdateRecord.png')" toolTip="Modifier un item"/>
									<s:Button id="btnTestItem" label="Tester l'item sélectionné" click="testItem_clickHandler(event)" visible="false" />
								</s:HGroup>
								<mx:DataGrid id="dg" width="100%" height="100%" click="selectDgItem(event);" editable="false" >
									<mx:columns>
										<mx:DataGridColumn dataField="id_gen" editable="false" visible="false" headerText="id_gen" />
										<mx:DataGridColumn dataField="valeur" headerText="Descripteur" editable="true" />
									</mx:columns>
								</mx:DataGrid>
							</s:VGroup>
						</s:NavigatorContent>
					</mx:TabNavigator>
					<s:VGroup width="100%" height="100%" >
						<s:Button label="Tester" click="tester_clickHandler(event)" />
						<s:TextInput width="100%" id="G" />
						<s:RichText id="GT" width="100%" height="100%" /> 
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="ecriture" >
			<s:VGroup width="100%" height="100%"  >
				<s:HGroup verticalAlign="middle">
					<s:Label text="Nom du concept :" width="112"/><s:TextInput id="libA" text="" />			
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="Type :" width="112"/><s:TextInput id="typeA" text="" /><s:Label text="(ne pas mettre de caractères spéciaux)" />			
				</s:HGroup>
				<s:HGroup height="100%"  >
					<s:Button label="Ajouter" click="ajouter()"  />
					<s:Button label="Annuler" click="{this.cptParent.vs.selectedChild = this.cptParent.lecture;}"  />
				</s:HGroup>
			</s:VGroup>				
		</mx:Canvas>
	</mx:ViewStack>						
</s:Group>
