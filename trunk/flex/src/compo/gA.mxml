<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:compo="compo.*" 
		 >
	<s:layout>
		<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
						
			[Bindable] public var oConcept:Object;
			[Bindable] public var idAdj:String;
			[Bindable] public var donnee:Object;
			[Bindable] public var testGen:Object;
			private var action:String="";
			private var arrR:Array;

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				Alert.show(str, "ERREUR : Détail Adjectif");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(oConcept){
					ROCA.findByIdConcept(oConcept.id_concept);
				}
			}
			
			protected function findByIdConcept_resultHandler(event:ResultEvent):void
			{
				if(event.result[0]){
					donnee = event.result[0];
					if(donnee.elision=="0")elision.selected = false;
					else elision.selected = true;
				}				
			}

			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					arrT.push(Gm_s.text);
					arrO.push(GTm_s);
					arrT.push(Gf_s.text);
					arrO.push(GTf_s);
					arrT.push(Gm_p.text);
					arrO.push(GTm_p);
					arrT.push(Gf_p.text);
					arrO.push(GTf_p);
					
					this.parentApplication.testerGen(arrT,arrO);
				}
			}

			protected function enregistrer_clickHandler(event:MouseEvent):void
			{
				action = "modifier";
				ROCA.utilise(idAdj);				
			}
			
			protected function utilise_resultHandler(event:ResultEvent):void
			{
				arrR = event.result as Array;
				if(arrR[0]['nbGen']!=0){
					if(arrR[0]['nbUti']==1){
						if(action=="supprimer"){
							Alert.show("Vous ne pouvez pas supprimer l'item."
								+"\nIl est utilisé dans "+arrR[0]['nbGen']+" expression(s)."
								+ "\nVous devez supprimer ces expresions avant de pouvoir supprimer l'item."
								,"Vérification disponibilité de l'item");										
						}else{
							Alert.show("L'item est utilisé dans "+arrR[0]['nbGen']+" expression(s)."
								+ "\nVoulez-vous que ces expressions soient impactées : cliquer sur 'OUI'"
								+ "\nPréférez vous créer un nouvel item : cliquer sur 'NON'"
								,"Vérification disponibilité de l'item", 3, this, verifSoloItemHandler);										
						}	
					}else{
						var mess:String ="";
						if(action=="modifier"){
							mess="\nPréférez vous créer un nouvel item : cliquer sur 'NON'";
						}
						
						Alert.show("Vous ne pouvez pas "+action+" l'item."
							+"\nIl est utilisé dans "+arrR[0]['nbGen']+" expression(s)."
							+"\nVoulez vous prévenir le(s) "+arrR[0]['nbUti']+" utilisateur(s)  : cliquer sur 'OUI'"
							+ mess
							,"Vérification disponibilité de l'item", 3, this, verifMultiItemHandler);									
					}
				}else{
					if(action=="supprimer")
						ROCA.remove(idAdj);
					if(action=="modifier"){
						modifier();
					}
				}
			}
			
			private function verifSoloItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{					
					modifier();				}
				if (event.detail == Alert.NO) 
				{
					if(action=="modifier"){
						modifier();
					}
				}
			}
			
			private function modifier():void
			{
				var arr:Array = new Array();
				arr["prefix"]=prefix.text;
				if(elision.selected)
					arr["elision"]= "1";
				else
					arr["elision"]= "0";
				arr["m_s"] = m_s.text;			
				arr["f_s"] = f_s.text;			
				arr["m_p"] = m_p.text;			
				arr["f_p"] = f_p.text;							
				ROCA.edit(donnee.id_adj, arr)								
			}

			private function ajouter():void
			{
				var arr:Array = new Array();
				arr["prefix"]=prefix.text;
				if(elision.selected)
					arr["elision"]= "1";
				else
					arr["elision"]= "0";
				arr["m_s"] = m_s.text;			
				arr["f_s"] = f_s.text;			
				arr["m_p"] = m_p.text;			
				arr["f_p"] = f_p.text;							
				ROCA.ajouter(arr);								
			}
			
			private function verifMultiItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{
					var modifs:String = "prefix="+prefix.text;
					if(elision.selected)
						modifs += ",elision=1";
					else
						modifs += ",elision=0";
					modifs += ",m_s="+m_s.text;
					modifs += ",f_s="+f_s.text;			
					modifs += ",m_p="+m_p.text;			
					modifs += ",f_p="+f_p.text;												
					var actis:String = "dictionnaire adjectif : modifier : "+oConcept.lib+" -> "+modifs+" (ref="+idAdj+")";
					this.parentApplication.ajoutActiUti(actis, arrR[0]['idsUti'],false);
				}
				if (event.detail == Alert.NO && action=="modifier") 
				{
					ajouter();					
				}
			}			
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<s:RemoteObject id="ROCA"
						 source="Model_DbTable_Gen_adjectifs" destination="zend" 
						 showBusyCursor="true"
						 fault="faultHandlerService(event)">
			<s:method name="edit" />  	
			<s:method name="findByIdConcept" result="findByIdConcept_resultHandler(event)" />
			<s:method name="utilise" result="utilise_resultHandler(event)"  />
			
		</s:RemoteObject>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" id="detail" >
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="Nom de l'adjectif :" width="112"/><s:Label text="{oConcept.lib}" />			
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="prefix :" width="112"/><s:TextInput id="prefix" text="{donnee.prefix}" />			
			<s:CheckBox label="élision :" id="elision" /> 			
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="masculin singulier :" width="112"/><s:TextInput id="m_s" text="{donnee.m_s}"/>			
			<s:TextInput width="100%" id="Gm_s" text="{'[32|m_mot] [a_'+oConcept.lib+']'}"/><s:Label width="100%" color="#E01919" text="---" id="GTm_s" />
		</s:HGroup>
		<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle">
			<s:Label text="féminin singulier :" width="112"/><s:TextInput id="f_s" text="{donnee.f_s}"/>			
			<s:TextInput width="100%" id="Gf_s" text="{'[32|m_phrase] [a_'+oConcept.lib+']'}"/><s:Label  width="100%" color="#E01919" text="---" id="GTf_s" />
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="masculin pluriel :" width="112"/><s:TextInput id="m_p" text="{donnee.m_p}"/>			
			<s:TextInput width="100%" id="Gm_p" text="{'[82|m_mot] [a_'+oConcept.lib+']'}"/><s:Label width="100%" color="#E01919" text="---" id="GTm_p" />
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label width="112" text="féminin pluriel :"/><s:TextInput id="f_p" text="{donnee.f_p}" />			
			<s:TextInput width="100%" id="Gf_p" text="{'[82|m_phrase] [a_'+oConcept.lib+']'}" /><s:Label width="100%" color="#E01919" text="---" id="GTf_p" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle">
			<s:Button label="Enregistrer" click="enregistrer_clickHandler(event)" />
			<s:Button label="Tester" click="tester_clickHandler(event)" />
		</s:HGroup>
	</s:VGroup>
</s:Group>
