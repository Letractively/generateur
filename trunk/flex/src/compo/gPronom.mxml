<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:compo="compo.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		 >
	<s:layout>
		<s:VerticalLayout paddingBottom="3" paddingLeft="3" paddingRight="3" paddingTop="3"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
						
			[Bindable] public var idDico:String;
			[Bindable] public var bRemove:Boolean=true;
			[Bindable] public var bAjout:Boolean=true;
			[Bindable] public var bModif:Boolean=true;
			[Bindable] public var bChange:Boolean=false;
			[Bindable] public var numC:String="00";
			[Bindable] public var numS:String="0";
			[Bindable] public var numSI:String="0";
			[Bindable] public var oItem:Object;
			[Bindable] public var oType:String;
			private var action:String="";
			private var arrR:Array;

			public function faultHandlerService(fault:FaultEvent):void
			{
				var str:String;
				str = "Code: "+fault.fault.faultCode.toString()+"\n"+
					"Detail: "+fault.fault.faultDetail.toString()+"\n"+
					"String: "+fault.fault.faultString.toString()+"\n";
				
				Alert.show(str, "ERREUR : Détail Pronom");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(idDico){
					ROC.findByIdDico(idDico);
				}
				bAjout = this.parentApplication.uti.écriture;
				bModif = this.parentApplication.uti.écriture;
				bRemove = this.parentApplication.uti.suppression;
				
			}
			
			protected function findByDico_resultHandler(event:ResultEvent):void
			{
				if(event.result){
					var arr:Array = event.result as Array;
					dg.dataProvider = arr;
					var dpCol:ArrayCollection = new ArrayCollection();
					dpCol.addItem({data:'any', label:'Tout'});
					dpCol.addItem({data:'lib', label:'Libellé'});
					dpCol.addItem({data:'num', label:'N°'});
					dpCol.addItem({data:'type', label:'Type'});
					dgFilter.dpColumns = dpCol;
					dgFilter.dpRows = arr;
					dgFilter.dg = dg;
				}
			}
						
			private function selectDgItem(event:Event):void {
				
				oItem=event.currentTarget.selectedItem;
				if(oItem.type=="complément"){
					numS="0";
					numSI="0";
					if(oItem.num > 9)
						numC = oItem.num; 
					else
						numC = "0"+oItem.num;					
				}
				if(oItem.type=="sujet"){
					numC = "00"
					numSI="0";
					numS = oItem.num;					
				}
				if(oItem.type=="sujet_indefini"){
					numC = "00"
					numS="0";
					numSI = oItem.num;					
				}
			}
			
			private function removeItem():void {
				
					Alert.show("Confirmez-vous la suppression de l'item ?",
						"Confirmation Suppression", 3, this, removeItemHandler);				
			}
			
			private function removeItemHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES) 
				{
					action = "supprimer";
					if(oItem.type=="complément")
						ROC.utilise_comp(idDico, oItem.num);
					if(oItem.type=="sujet")
						ROC.utilise_sujet(idDico, oItem.num);
				}
			}
						
			protected function enregistrer_clickHandler(event:MouseEvent):void
			{
				if(oItem){
					action = "modifier";
					if(oItem.type=="complément")
						ROC.utilise_comp(idDico, oItem.num);
					if(oItem.type=="sujet")
						ROC.utilise_sujet(idDico, oItem.num);
				}
			}
			
			protected function tester_clickHandler(event:MouseEvent):void
			{
				if(this.parentApplication.verifDico()){					
					var arrT:Array = new Array();
					var arrO:Array = new Array();
					
					arrT.push(G.text);
					arrO.push(GT);
					arrT.push(Ge.text);
					arrO.push(GTe);
					
					this.parentApplication.testerGen(arrT,arrO);
				}
			}
			
			
			protected function edit_resultHandler(event:ResultEvent):void
			{
				bChange = false;
				ROC.findByIdDico(idDico);
				T0.setStyle("color","black");
				T0e.setStyle("color","black");
				GT.text = "--";
				GTe.text = "--";
			}			
			
			protected function t_changeHandler(event:TextOperationEvent):void
			{
				if(!bModif)return;
				
				var tx:TextInput = event.target as TextInput;
				tx.setStyle("color","red");
				bChange = true;
			}
			
			protected function utilise_resultHandler(event:ResultEvent):void
			{
				arrR = event.result as Array;
				var actis:String = "";
				if(action == "modifier")
					actis = "dictionnaire pronom : modifier "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : "+oItem.lib+" -> "+T0.text+" + "+oItem.lib_eli+" -> "+T0e.text+" (ref="+idDico+"_"+oItem.id_pronom+")";				
				if(action == "supprimer")
					actis = "dictionnaire pronom : supprimer "+arrR[0]['nbGen']+" items pour "+arrR[0]['nbUti']+" utilisateurs : "+oItem.lib+" + "+oItem.lib_eli+" (ref="+idDico+"_"+oItem.id_pronom+")";				
				
				var data:Array = new Array;
				data['lib']=T0.text;
				data['lib_eli']=T0e.text;
				this.parentApplication.verifActi(arrR[0], action, actis, ROC, oItem.id_pronom, data, idDico);				
			}

			protected function remove_resultHandler(event:ResultEvent):void
			{
				ROC.findByIdDico(idDico);				
			}

			protected function ajouter_clickHandler(event:MouseEvent):void
			{
				if(sujet_indefini.selected)oType="sujet_indefini";
				if(sujet.selected)oType="sujet";

				//vérifie le nombre de pronom
				var i:int = 0;
				for each(var s:Object in dg.dataProvider){
					if(s.type==oType)i++;
				}
				var max:int=9;
				if(oType=="complément")max=99;
				if(i == max){
					Alert.show("Le nombre maximum de "+oType+" est atteint.\nVous ne pouvez pas en ajouter.", "Ajout Pronom");
					return;
				}
				
				var params:Array = new Array;
				params['id_dico']=idDico;
				params['lib']=lib.text;				
				params['lib_eli']=lib_eli.text;
				params['type']=oType;
				ROC.ajouter(params);
			}

			protected function ajouter_resultHandler(event:ResultEvent):void
			{
				Alert.show("L'item est ajouté.","Ajout d'un item");				
				
				vs.selectedChild = lecture;
				ROC.findByIdDico(idDico);
			}
			protected function initEcriture():void
			{
				if(oType=="complément"){
					sujet_indefini.visible=false;
					sujet.visible=false;					
				}
			}
		]]>
	</fx:Script>
		
	<fx:Declarations>
		<s:RemoteObject id="ROC"
						 source="Model_DbTable_Gen_pronoms" destination="zend" 
						 showBusyCursor="true"
						 fault="faultHandlerService(event)">
			<s:method name="edit" result="edit_resultHandler(event)" />
			<s:method name="findByIdDico" result="findByDico_resultHandler(event)" />
			<s:method name="utilise_sujet" result="utilise_resultHandler(event)" />
			<s:method name="utilise_comp" result="utilise_resultHandler(event)" />
			<s:method name="remove" result="remove_resultHandler(event)" />			
			<s:method name="ajouter" result="ajouter_resultHandler(event)" />			
		</s:RemoteObject>
	</fx:Declarations>
	<mx:ViewStack id="vs" width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" id="lecture" >	
			<s:VGroup width="100%" height="100%" id="detail" >
				<compo:hbFilterControl id="dgFilter"  />
				<s:VGroup width="100%" height="100%" >
					<s:HGroup>
						<mx:LinkButton visible="{bRemove}" width="20" click="removeItem()"
									   icon="@Embed('images/DeleteRecord.png')" toolTip="{'Supprimer un item'}"/>
						<mx:LinkButton id="btnAddNew" visible="{bAjout}" width="20" click="{vs.selectedChild = ecriture;}"
									   icon="@Embed('images/AddRecord.png')" toolTip="{'Ajouter un item'}"/>					
					</s:HGroup>
					<s:HGroup width="100%" height="100%" >				
						<mx:DataGrid id="dg" width="100%" height="100%" click="selectDgItem(event);" editable="false" >
							<mx:columns>
								<mx:DataGridColumn dataField="id_pronom" editable="false" visible="false" headerText="id_pronom" />
								<mx:DataGridColumn dataField="type"  editable="false" headerText="Type" />
								<mx:DataGridColumn dataField="num"  headerText="N°" />
								<mx:DataGridColumn dataField="lib" headerText="Libellé" />
								<mx:DataGridColumn dataField="lib_eli" headerText="Elision" />
							</mx:columns>
						</mx:DataGrid>
						<s:VGroup>
							<s:HGroup>
								<s:TextInput id="T0" width="100%" text="{oItem.lib}" change="t_changeHandler(event)" />
								<s:TextInput id="G" width="100%" text="{'[01'+numS+numC+'0'+numSI+'0|v_lire]'}" />
								<s:TextInput id="GT" width="100%" color="#117E20" text="---" />															
							</s:HGroup>
							<s:HGroup>
								<s:TextInput id="T0e" width="100%" text="{oItem.lib_eli}" change="t_changeHandler(event)" />
								<s:TextInput id="Ge" width="100%" text="{'[01'+numS+numC+'0'+numSI+'0|v_aimer]'}" />
								<s:TextInput id="GTe" width="100%" color="#117E20" text="---" />															
							</s:HGroup>
							<s:HGroup>
								<s:Button label="Tester" click="tester_clickHandler(event)" />
								<s:Button label="Enregistrer" click="enregistrer_clickHandler(event)" visible="{bChange}" color="red" />
							</s:HGroup>
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
		</mx:Canvas>
		<mx:Canvas width="100%" height="100%" id="ecriture" >
			<s:VGroup width="100%" height="100%" creationComplete="initEcriture()" >
				<s:HGroup verticalAlign="middle">
					<s:Label text="Libellé : "/><s:TextInput id="lib" width="100%" text="" />					
					<s:Label text="élision : "/><s:TextInput id="lib_eli" width="100%" text="" />
					<mx:RadioButton groupName="type" id="sujet" label="sujet" /> 
					<mx:RadioButton groupName="type" id="sujet_indefini" label="sujet_indefini" />
					
				</s:HGroup>
				<s:HGroup>
					<s:Button label="Ajouter" click="ajouter_clickHandler(event)"  />
					<s:Button label="Annuler" click="{vs.selectedChild = lecture;}"  />
				</s:HGroup>
			</s:VGroup>				
		</mx:Canvas>
	</mx:ViewStack>			
			
</s:Group>
